{
  "name": "vue-multiselect",
  "version": "0.3.1",
  "description": "Multiselect component for vue.js",
  "author": {
    "name": "Damian Dulisz",
    "email": "damian.dulisz@monterail.com"
  },
  "private": false,
  "license": "MIT",
  "main": "lib/vue-multiselect.js",
  "jsnext:main": "lib/vue-multiselect.js",
  "jspm": {
    "main": "lib/vue-multiselect.js",
    "registry": "npm",
    "format": "esm"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/monterail/vue-multiselect.git"
  },
  "scripts": {
    "dev": "node build/dev-server.js",
    "docs": "rm -rf gh-pages && mkdir gh-pages && node build/build.js",
    "test": "karma start test/unit/karma.conf.js --single-run",
    "unit-watch": "karma start test/unit/karma.conf.js --watch",
    "lint": "eslint --ext .js,.vue src test/unit/specs",
    "bundle": "webpack --config build/webpack.bundle.conf.js"
  },
  "browserify": {
    "transform": [
      "vueify",
      [
        "babelify",
        {
          "presets": [
            "es2015"
          ]
        }
      ]
    ]
  },
  "devDependencies": {
    "babel-core": "^6.7.7",
    "babel-loader": "^6.2.4",
    "babel-plugin-transform-runtime": "^6.7.5",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-stage-2": "^6.5.0",
    "babel-runtime": "^6.0.0",
    "chai": "^3.5.0",
    "connect-history-api-fallback": "^1.1.0",
    "copy-webpack-plugin": "^3.0.1",
    "cross-spawn": "^2.1.5",
    "css-loader": "^0.23.0",
    "eslint": "^2.0.0",
    "eslint-config-standard": "^5.1.0",
    "eslint-friendly-formatter": "^1.2.2",
    "eslint-loader": "^1.3.0",
    "eslint-plugin-html": "^1.3.0",
    "eslint-plugin-promise": "^1.0.8",
    "eslint-plugin-standard": "^1.3.2",
    "eventsource-polyfill": "^0.9.6",
    "express": "^4.13.3",
    "extract-text-webpack-plugin": "^1.0.1",
    "file-loader": "^0.8.4",
    "function-bind": "^1.0.2",
    "html-webpack-plugin": "^2.8.1",
    "http-proxy-middleware": "^0.12.0",
    "inject-loader": "^2.0.1",
    "isparta-loader": "^2.0.0",
    "jade": "^1.11.0",
    "jade-loader": "^0.8.0",
    "json-loader": "^0.5.4",
    "karma": "^0.13.19",
    "karma-coverage": "^0.5.5",
    "karma-mocha": "^0.2.2",
    "karma-phantomjs-launcher": "^1.0.0",
    "karma-sinon-chai": "^1.2.0",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-spec-reporter": "^0.0.24",
    "karma-webpack": "^1.7.0",
    "lolex": "^1.4.0",
    "mocha": "^2.4.5",
    "nightwatch": "^0.8.18",
    "node-sass": "^3.4.2",
    "ora": "^0.2.0",
    "phantomjs-prebuilt": "^2.1.3",
    "sass-loader": "^3.2.0",
    "selenium-server": "^2.53.0",
    "shelljs": "^0.6.0",
    "sinon": "^1.17.3",
    "sinon-chai": "^2.8.0",
    "url-loader": "^0.5.7",
    "vue": "^1.0.21",
    "vue-hot-reload-api": "^1.2.0",
    "vue-html-loader": "^1.0.0",
    "vue-loader": "^8.2.1",
    "vue-style-loader": "^1.0.0",
    "webpack": "^1.13.0",
    "webpack-dev-middleware": "^1.4.0",
    "webpack-hot-middleware": "^2.6.0",
    "webpack-merge": "^0.8.3"
  },
  "readme": "# vue-multiselect ![Build Status](https://circleci.com/gh/monterail/vue-multiselect/tree/master.svg?style=shield&circle-token=5c931ff28fd12587610f835472becdd514d09cef)\nProbably the most complete *selecting* solution for Vue.js, without jQuery.\n\n### Features & characteristics:\n* NO dependencies\n* Single select\n* Multiple select\n* Tagging\n* Dropdowns\n* Filtering\n* Search with suggestions\n* Logic split into mixins\n* Basic component and support for custom components\n* Vuex support\n* Async options support\n* \\> 95% test coverage\n* Fully configurable (see props list below)\n\n## Demo & docs\n\n[http://monterail.github.io/vue-multiselect/](http://monterail.github.io/vue-multiselect/)\n\n## Install & basic usage\n\n``` bash\nnpm install vue-multiselect\n```\n\n``` html\n<template>\n  <div>\n    <multiselect :selected.sync=\"selected\" :options=\"options\"></multiselect>\n  </div>\n</template>\n```\n\n``` javascript\nimport Multiselect from 'vue-multiselect'\nexport default {\n  components: { Multiselect },\n  data () {\n    return {\n      selected: null,\n      options: ['list', 'of', 'options']\n    }\n  }\n}\n```\n\nYou can now author custom components based on *vue-multiselect* mixins.\n\n``` javascript\nimport { multiselectMixin, pointerMixin } from 'vue-multiselect'\nexport default {\n  mixins: [multiselectMixin, pointerMixin],\n  data () {\n    return {\n      selected: null,\n      options: ['list', 'of', 'options']\n    }\n  }\n}\n```\n\n## Roadmap:\n\n* Option grouping\n* Better mobile support\n* Stateless dropdowns (with no selected prop, just action pickers / search boxes)\n* RTL support, accessibility\n* Examples of custom components / templates ready to use in project\n* Reworking the documentation to include much more examples and use cases\n* Fix problem with not counting the height of the option element when creating a custom element. This is important for scrolling the options viewport when using highlighting pointer.\n\n## Examples\nin jade-lang/pug-lang\n\n### Single select / dropdown\n``` jade\nmultiselect(\n  :options=\"source\",\n  :selected.sync=\"value\",\n  :multiple=\"false\",\n  :searchable=\"false\",\n  placeholder=\"Select one\",\n  label=\"name\",\n  :close-on-select=\"false\",\n  :allow-empty=\"false\",\n  key=\"name\"\n)\n```\n\n### Single select with search\n``` jade\nmultiselect(\n  :options=\"source\",\n  :selected.sync=\"value\",\n  :multiple=\"false\",\n  :searchable=\"true\",\n  placeholder=\"Select one\",\n  label=\"name\",\n  :close-on-select=\"true\",\n  :clear-on-select=\"false\"\n  key=\"name\"\n)\n```\n\n### Multiple select with search\n``` jade\nmultiselect(\n  :options=\"source\",\n  :selected.sync=\"multiValue\",\n  :multiple=\"true\",\n  :searchable=\"true\",\n  placeholder=\"Pick some\",\n  label=\"name\",\n  :close-on-select=\"true\"\n  key=\"name\"\n)\n```\n\n### Tagging\nwith `:on-tag` and `:on-change` callback functions\n``` jade\nmultiselect(\n  :options=\"taggingOptions\",\n  :selected=\"taggingSelected\",\n  :multiple=\"multiple\",\n  :searchable=\"searchable\",\n  :on-tag=\"addTag\",\n  :on-change=\"updateSelectedTagging\",\n  :taggable=\"true\",\n  tag-placeholder=\"Add this as new tag\"\n  placeholder=\"Type to search or add tag\"\n  label=\"name\"\n  key=\"code\"\n)\n```\n\n``` javascript\n\naddTag (newTag) {\n  const tag = {\n    name: newTag,\n    code: newTag.substring(0, 2) + Math.floor((Math.random() * 10000000))\n  }\n  this.taggingOptions.push(tag)\n  this.taggingSelected.push(tag)\n},\n```\n\n### Vuex supporting example\nwith `:on-change` callback function\n\n``` jade\nmultiselect(\n  :options=\"source\",\n  :selected=\"value\",\n  :multiple=\"false\",\n  :searchable=\"false\",\n  placeholder=\"Select one\",\n  :on-change=\"onChangeAction\"\n)\n```\n\n``` javascript\nmethods: {\n  onChangeAction (newValue) {\n    dispatch('SET_SELECT_VALUE', newValue)\n  }\n}\n```\n\n### Asynchronous dropdown\n``` jade\nmultiselect(\n  :options=\"countries\",\n  :selected.sync=\"selectedCountries\",\n  :multiple=\"multiple\",\n  :searchable=\"searchable\",\n  placeholder=\"Type to search\",\n  :on-search-change=\"asyncFind\",\n  label=\"name\"\n  key=\"code\"\n)\n  span(slot=\"noResult\").\n    Oops! No elements found. Consider changing the search query.\n```\n\n``` javascript\nmethods: {\n  asyncFind (query) {\n    this.countries = findService(query)\n  }\n}\n```\n\n## Props config\n\n``` javascript\n// multiselectMixin.js\n\nprops: {\n  /**\n   * Array of available options: Objects, Strings or Integers.\n   * If array of objects, visible label will default to option.label.\n   * If `labal` prop is passed, label will equal option['label']\n   * @type {Array}\n   */\n  options: {\n    type: Array,\n    required: true\n  },\n  /**\n   * Equivalent to the `multiple` attribute on a `<select>` input.\n   * @default false\n   * @type {Boolean}\n   */\n  multiple: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * Required. Presets the selected options. Add `.sync` to\n   * update parent value. If this.onChange callback is present,\n   * this will not update. In that case, the parent is responsible\n   * for updating this value.\n   * @type {Object||Array||String||Integer}\n   */\n  selected: {\n    required: true\n  },\n  /**\n   * Key to compare objects\n   * @default 'id'\n   * @type {String}\n   */\n  key: {\n    type: String,\n    default: false\n  },\n  /**\n   * Label to look for in option Object\n   * @default 'label'\n   * @type {String}\n   */\n  label: {\n    type: String,\n    default: false\n  },\n  /**\n   * Enable/disable search in options\n   * @default true\n   * @type {Boolean}\n   */\n  searchable: {\n    type: Boolean,\n    default: true\n  },\n  /**\n   * Clear the search input after select()\n   * @default true\n   * @type {Boolean}\n   */\n  clearOnSelect: {\n    type: Boolean,\n    default: true\n  },\n  /**\n   * Hide already selected options\n   * @default false\n   * @type {Boolean}\n   */\n  hideSelected: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * Equivalent to the `placeholder` attribute on a `<select>` input.\n   * @default 'Select option'\n   * @type {String}\n   */\n  placeholder: {\n    type: String,\n    default: 'Select option'\n  },\n  /**\n   * Sets maxHeight style value of the dropdown\n   * @default 300\n   * @type {Integer}\n   */\n  maxHeight: {\n    type: Number,\n    default: 300\n  },\n  /**\n   * Allow to remove all selected values\n   * @default true\n   * @type {Boolean}\n   */\n  allowEmpty: {\n    type: Boolean,\n    default: true\n  },\n  /**\n   * Callback function to call after this.value changes\n   * @callback onChange\n   * @default false\n   * @param {Array||Object||String||Integer} Current this.value\n   * @param {Integer} $index of current selection\n   * @type {Function}\n   */\n  onChange: {\n    type: Function,\n    default: false\n  },\n  /**\n   * Callback function to call after this.search changes\n   * @callback onSearchChange\n   * @default false\n   * @param {String} Pass current search String\n   * @type {Function}\n   */\n  onSearchChange: {\n    type: Function,\n    default: false\n  },\n  /**\n   * Value that indicates if the dropdown has been used.\n   * Useful for validation.\n   * @default false\n   * @type {Boolean}\n   */\n  touched: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * Reset this.value, this.search, this.selected after this.value changes.\n   * Useful if want to create a stateless dropdown, that fires the this.onChange\n   * callback function with different params.\n   * @default false\n   * @type {Boolean}\n   */\n  resetAfter: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * Enable/disable closing after selecting an option\n   * @default true\n   * @type {Boolean}\n   */\n  closeOnSelect: {\n    type: Boolean,\n    default: true\n  },\n  /**\n   * Function to interpolate the custom label\n   * @default false\n   * @type {Function}\n   */\n  customLabel: {\n    type: Function,\n    default: false\n  },\n  /**\n   * Disable / Enable tagging\n   * @default false\n   * @type {Boolean}\n   */\n  taggable: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * Callback function to run when attemting to add a tag\n   * @default suitable for primitive values\n   * @param {String} Tag string to build a tag\n   * @type {Function}\n   */\n  onTag: {\n    type: Function,\n    default: function (tag) {\n      this.options.push(tag)\n      this.value.push(tag)\n    }\n  },\n  /**\n   * String to show when highlighting a potential tag\n   * @default 'Press enter to create a tag'\n   * @type {String}\n  */\n  tagPlaceholder: {\n    type: String,\n    default: 'Press enter to create a tag'\n  },\n  /**\n   * Number of allowed selected options. No limit if false.\n   * @default False\n   * @type {Number}\n  */\n  max: {\n    type: Number,\n    default: false\n  }\n}\n\n// pointerMixin.js\n\nprops: {\n  /**\n   * Enable/disable highlighting of the pointed value.\n   * @type {Boolean}\n   * @default true\n   */\n  showPointer: {\n    type: Boolean,\n    default: true\n  }\n}\n\n// Multiselect.vue\n\nprops: {\n  /**\n   * String to show when pointing to an option\n   * @default 'Press enter to select'\n   * @type {String}\n   */\n  selectLabel: {\n    type: String,\n    default: 'Press enter to select'\n  },\n  /**\n   * String to show next to selected option\n   * @default 'Selected'\n   * @type {String}\n  */\n  selectedLabel: {\n    type: String,\n    default: 'Selected'\n  },\n  /**\n   * String to show when pointing to an alredy selected option\n   * @default 'Press enter to remove'\n   * @type {String}\n  */\n  deselectLabel: {\n    type: String,\n    default: 'Press enter to remove'\n  },\n  /**\n   * Decide whether to show pointer labels\n   * @default true\n   * @type {Boolean}\n  */\n  showLabels: {\n    type: Boolean,\n    default: true\n  },\n  /**\n   * Label to look for in option Object\n   * @default 'label'\n   * @type {String}\n   */\n  limit: {\n    type: Number,\n    default: 99999\n  },\n  /**\n   * Function that process the message shown when selected\n   * elements pass the defined limit.\n   * @default 'and * more'\n   * @param {Int} count Number of elements more than limit\n   * @type {Function}\n   */\n  limitText: {\n    type: Function,\n    default: count => `and ${count} more`\n  }\n}\n```\n\n## Contributing\n\n``` bash\n# serve with hot reload at localhost:8080\nnpm run dev\n\n# lib distribution build with minification\nnpm run bundle\n\n# build the docs into gh-pages\nnpm run docs\n\n# run unit tests\nnpm run test\n\n# run unit tests watch\nnpm run unit-watch\n\n```\n\nFor detailed explanation on how things work, checkout the [guide](http://vuejs-templates.github.io/webpack/) and [docs for vue-loader](http://vuejs.github.io/vue-loader).\n",
  "readmeFilename": "README.md",
  "_id": "vue-multiselect@0.3.1",
  "dist": {
    "shasum": "578b5ccb9a5f0031235762c40c142bfad32f826a"
  },
  "_from": "vue-multiselect@^0.3.0",
  "_resolved": "https://registry.npmjs.org/vue-multiselect/-/vue-multiselect-0.3.1.tgz"
}
